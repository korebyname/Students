#include <iostream>
#include <vector>
#include <string>
#include <algorithm>
#include <numeric>

class Person {
public:
    std::string firstName;
    std::string surname;
    std::vector<double> homeworkScores;
    double examScore;
    double finalGrade;

    Person(std::string fn, std::string ln) : firstName(fn), surname(ln), examScore(0), finalGrade(0) {}
    Person(const Person& other) = default;
    Person& operator=(const Person& other) = default; 
    ~Person() = default; 

    void inputScores();
    void calculateFinalGrade(bool useMedian);

    friend std::ostream& operator<<(std::ostream& os, const Person& person);

private:
    double calculateMedian(std::vector<double>& scores);
};

void Person::inputScores() {
}

double Person::calculateMedian(std::vector<double>& scores) {
    std::sort(scores.begin(), scores.end());
    size_t size = scores.size();
    return (size % 2 == 0) ? (scores[size/2 - 1] + scores[size/2]) / 2 : scores[size/2];
}

void Person::calculateFinalGrade(bool useMedian) {
    if (useMedian) {
        finalGrade = calculateMedian(homeworkScores);
    } else {
        finalGrade = std::accumulate(homeworkScores.begin(), homeworkScores.end(), examScore) / (homeworkScores.size() + 1);
    }
}

std::ostream& operator<<(std::ostream& os, const Person& person) {
    os << person.firstName << "\t" << person.surname << "\t" << person.finalGrade;
    return os;
}
